//
// Created by c1533 on 2022/10/15.
//
/**最佳归并树
 * 对2路归并：
 * 每个初始归并段看作一个叶子结点，归并段的长度作为结点权值，则带权路径长度=读磁盘次数=写磁盘次数
 * 重要结论：归并过程中磁盘I/O次数=归并树的WPL*2
 * 要让磁盘I/O次数最小，使用哈夫曼树
 * 多路归并：
 * n路归并，让最小的n个结点先进行归并，得到数a
 * 然后让最小的n个结点(包括刚得到的数a)进行n路归并(构造哈夫曼树)
 * 所得到读写磁盘次数最少
 * 读写磁盘(I/O)次数=2*WPL
 * */

//如果少一个归并段，就不是最佳归并树
/**正确做法：
 * 对于k叉归并树，若初始归并段无法构成严格的k叉归并树
 * 则需要补充几个长度为0的“虚段”，再进行k叉哈夫曼构造
 * 0算入最小的数，即在最下层叶子结点
 * */
/**添加虚段的数量
 * 注意，对于k叉归并，若初始归并段的数量无法构成严格的k叉归并树，则需要补充几个长度为0的“虚段”，再进行k叉哈夫曼树的构造
 * k叉的最佳归并树一定是一棵严格的k叉数，即树中只包含度为k和度为0的结点
 * 设度为k的结点有nk个，度为0的结点有n0个，归并树总结点数为n，则：
 * 初始归并段数量+虚段数量=n0
 * k*nk=n-1
 * n=n0+nk
 * n0=(k-1)*nk+1
 * nk=(n0-1)/(k-1)
 * nk如果是整数，则说明是严格k叉树
 * */







